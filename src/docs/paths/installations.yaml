paths:
  /installations:
    get:
      summary: List installations
      description: Returns all installations with optional filters and pagination.
      tags: [Installations]
      parameters:
        - in: query
          name: external_order_id
          schema: { type: string }
        - in: query
          name: store_id
          schema: { $ref: '../components/base.yaml#/schemas/ID' }
        - in: query
          name: status
          schema: { $ref: '../components/installations.yaml#/schemas/InstallStatus' }
        - in: query
          name: limit
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '../components/installations.yaml#/schemas/InstallationList' }

    post:
      summary: Create installation
      tags: [Installations]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '../components/installations.yaml#/schemas/InstallationCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '../components/installations.yaml#/schemas/Installation' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '../components/base.yaml#/schemas/Error' }

  /installations/{id}:
    get:
      summary: Get installation by ID
      tags: [Installations]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '../components/base.yaml#/schemas/ID' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '../components/installations.yaml#/schemas/Installation' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '../components/base.yaml#/schemas/Error' }

  /installations/{id}/items:
    post:
      summary: Add item to installation
      tags: [Installations]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '../components/base.yaml#/schemas/ID' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '../components/installations.yaml#/schemas/InstallationItemCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '../components/installations.yaml#/schemas/InstallationItem' }
        '404':
          description: Installation not found
          content:
            application/json:
              schema: { $ref: '../components/base.yaml#/schemas/Error' }

  /installations/{id}/crew:
    post:
      summary: Assign crew to installation
      tags: [Installations]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '../components/base.yaml#/schemas/ID' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '../components/installations.yaml#/schemas/CrewAssignmentCreate' }
      responses:
        '201':
          description: Crew assigned
          content:
            application/json:
              schema: { $ref: '../components/installations.yaml#/schemas/CrewAssignment' }
        '404':
          description: Installation not found
          content:
            application/json:
              schema: { $ref: '../components/base.yaml#/schemas/Error' }

  /installations/{id}/status:
    patch:
      summary: Update installation status
      tags: [Installations]
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '../components/base.yaml#/schemas/ID' }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status: { $ref: '../components/installations.yaml#/schemas/InstallStatus' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '../components/installations.yaml#/schemas/Installation' }
        '400':
          description: Bad request
          content:
            application/json:
              schema: { $ref: '../components/base.yaml#/schemas/Error' }
        '404':
          description: Not found
          content:
            application/json:
              schema: { $ref: '../components/base.yaml#/schemas/Error' }
