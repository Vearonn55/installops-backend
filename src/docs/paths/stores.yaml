paths:
  /stores:
    get:
      tags: [Stores]
      summary: List stores
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Free-text search (name, external_store_id)
        - in: query
          name: external_store_id
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, default: 20 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '../components/stores.yaml#/schemas/StoreList' }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '../components/base.yaml#/schemas/Error' } } } }

    post:
      tags: [Stores]
      summary: Create store
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '../components/stores.yaml#/schemas/StoreCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '../components/stores.yaml#/schemas/Store' }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '../components/base.yaml#/schemas/Error' } } } }
        '401': { description: Unauthorized, content: { application/json: { schema: { $ref: '../components/base.yaml#/schemas/Error' } } } }

  /stores/{id}:
    get:
      tags: [Stores]
      summary: Get store by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '../components/base.yaml#/schemas/ID' }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '../components/stores.yaml#/schemas/Store' }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '../components/base.yaml#/schemas/Error' } } } }

    patch:
      tags: [Stores]
      summary: Update store
      parameters:
        - in: path
          name: id
          required: true
          schema: { $ref: '../components/base.yaml#/schemas/ID' }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '../components/stores.yaml#/schemas/StoreUpdate' }
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '../components/stores.yaml#/schemas/Store' }
        '400': { description: Bad request, content: { application/json: { schema: { $ref: '../components/base.yaml#/schemas/Error' } } } }
        '404': { description: Not found, content: { application/json: { schema: { $ref: '../components/base.yaml#/schemas/Error' } } } }
